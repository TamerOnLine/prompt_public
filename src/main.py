"""
This script uses LangChain's Ollama model to generate similarity search guides 
for different data types using FAISS. The script:
- Initializes the Ollama model.
- Uses a ChatPromptTemplate to generate responses dynamically.
- Iterates over different data types and saves AI-generated responses in markdown files.
"""

from langchain_ollama import ChatOllama
from langchain.prompts import ChatPromptTemplate


# Initialize the local Ollama model
llm = ChatOllama(model="mistral", temperature=0.7)

# Define the chat prompt template for FAISS-based similarity search
chat_template = ChatPromptTemplate.from_messages([
    ("system", "You are an assistant specialized in similarity search using FAISS."),
    ("user", "How can I use FAISS to perform similarity search on {data_type} data?\n\n"
             "Please provide a detailed step-by-step guide, including data preprocessing, "
             "vectorization, indexing, and searching.")
])

# Dictionary of data types with explanations for FAISS
data_types = {
    "text": (
        "Text data can be converted into embeddings using models like Word2Vec, TF-IDF, or BERT. "
        "These embeddings can be indexed in FAISS for fast similarity search."
    ),
    "images": (
        "Images can be represented as feature vectors using CNNs (e.g., ResNet, VGG). "
        "These vectors can be stored in FAISS and used to retrieve similar images."
    ),
    "audio": (
        "Audio files can be converted into feature vectors using MFCCs, spectrograms, or deep learning embeddings. "
        "FAISS can then be used for quick similarity search in large audio datasets."
    ),
    "video": (
        "Videos can be processed by extracting key frames and converting them into feature vectors using CNNs. "
        "FAISS can store these feature vectors to enable video similarity search."
    ),
    "medical": (
        "Medical images (like MRIs, CT scans) can be processed using CNNs to generate feature embeddings. "
        "FAISS can store and retrieve similar scans efficiently."
    ),
    "tabular": (
        "Tabular data can be transformed into numerical vectors using dimensionality reduction techniques "
        "(e.g., PCA, t-SNE). FAISS enables searching for similar records."
    ),
    "geospatial": (
        "Geospatial data (e.g., coordinates, maps) can be embedded using specialized techniques "
        "(e.g., spatial embeddings). FAISS enables quick geospatial similarity retrieval."
    ),
    "AI embeddings": (
        "Deep learning embeddings from models like GPT, BERT, or custom ML models can be stored in FAISS. "
        "This enables efficient search for similar AI-generated features."
    )
}


def generate_faiss_guides():
    """
    Generates FAISS similarity search guides for different data types using LangChain's Ollama model.
    - Iterates over the defined data types.
    - Uses an AI model to generate responses.
    - Saves responses in markdown files.
    """
    for data_type, explanation in data_types.items():
        try:
            # Format the prompt with the current data type
            prompt_filled = chat_template.format(data_type=data_type)

            # Invoke the Ollama model to generate a response
            response = llm.invoke(prompt_filled)

            # Extract the response content
            response_text = response.content.strip() if hasattr(response, "content") else None

            if response_text:
                # Format the response
                final_response = (
                    f"### üîç Similarity Search on {data_type.capitalize()} Data using FAISS\n\n"
                    f"**üìå Overview:** {explanation}\n\n"
                    f"**üìñ Step-by-step Guide:**\n\n{response_text}\n\n"
                    "---\n*Generated by AI*"
                )

                # Print the formatted response
                print("\n" + "=" * 50)
                print(f"üîç AI Response - Similarity Search on {data_type.capitalize()} using FAISS üîç")
                print("=" * 50 + "\n")
                print(final_response)
                print("\n" + "=" * 50)

                # Save the response to a Markdown file
                md_filename = f"{data_type.lower()}_faiss_similarity_search.md"
                with open(md_filename, "w", encoding="utf-8") as file:
                    file.write(final_response)

                print(f"\n‚úÖ The response has been saved to '{md_filename}'.")
            else:
                print(f"‚ö†Ô∏è No valid response received for {data_type}.")

        except Exception as e:
            print(f"‚ùå Error processing {data_type}: {e}")


# Execute the guide generation function
if __name__ == "__main__":
    generate_faiss_guides()

